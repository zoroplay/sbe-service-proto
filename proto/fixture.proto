syntax = "proto3";

import "google/protobuf/struct.proto";

package fixture;

service FixtureService {

  /*
  Gets a list of sports, categories, tournaments based on upcoming fixtures for a period
   */
  rpc GetSportsMenu (GetSportMenuRequest) returns (AvailableSportMenuResponse){}

  /*
  Gets a list of sports, categories, tournaments based on upcoming fixtures for a period
   */
   rpc GetCategoriesMenu (GetSportMenuRequest) returns (CategoryMenuResponse){}

   /*
  Gets a list of sports, categories, tournaments based on upcoming fixtures for a period
   */
  rpc GetTournamentsMenu (GetSportMenuRequest) returns (TournamentMenuResponse){}

  /*
  Gets all Betradar markets
   */
  rpc GetBetradarMarkets (Empty) returns (BetradarMarketResponse){}
  /*
  Gets a list of available markets, markets are pulled peridocally from betradr API
   */
  rpc GetMarkets (GetMarketsRequest) returns (GetMarketResponse){}
  /*
  Gets a list of available markets, markets are pulled peridocally from betradr API
   */
  rpc SaveMarket (SaveMarketRequest) returns (CommonResponseObj){}

  rpc DeleteMarket (DeleteMarketGroupRequest) returns (CommonResponseObj){}


  //GetTournaments - Gets a list of available tournaments, the tournaments are filterred by the supplied sportID
  rpc GetTournaments (FilterBySportID) returns (AllTournamentResponse){}

  //GetSports - Gets a list of all sports
  rpc GetSports (Empty) returns (AllSportResponse){}

  //GetLiveGamesCount - Get a count of all the live games
  rpc GetLiveGamesCount (FilterBySportID) returns (CountResponse){}

  //GetHighlights - This GRPC method retrieves the odds for a particular market (e.g 1x2, total, Double chance etc) for games, the method provides a way to pass pagination parameters, this method will be used to load games in the front page of the site
  rpc GetHighlights (GetHighlightsRequest) returns (GetHighlightsResponse){}

  //GetHighlights - This GRPC method retrieves the odds for a particular market (e.g 1x2, total, Double chance etc) for games, the method provides a way to pass pagination parameters, this method will be used to load games in the front page of the site
  rpc GetFixtures (GetFixturesRequest) returns (GetFixturesResponse){}

  //GetLiveHighlights - This GRPC method retrieves the odds for a particular market (e.g 1x2, total, Double chance etc) for live games, the method provides a way to pass pagination parameters, this method will be used to load games in the front page of the site
  rpc GetLiveHighlights (GetHighlightsRequest) returns (GetHighlightsResponse){}

  //GetFixtureWithOdds - Loads odds for all the markets of the supplied matchID
  rpc GetFixtureWithOdds (FilterByMatchID) returns (FixtureOdds){}

  //UpdateMarketPriority - Update market priority, this will affect the order of markets in GetFixtureWithOdds method
  rpc UpdateMarketPriority (UpdateMarketRequest) returns (ResponseString){}

  rpc CreateOutcomeAlias (CreateOutcomeAliasRequest) returns (CreateOutcomeAliasResponse){}
  rpc UpdateOutcomeAlias (CreateOutcomeAliasRequest) returns (CreateOutcomeAliasResponse){}
  rpc GetAllOutcomeAlias (GetAllOutcomeAliasRequest) returns (GetAllOutcomeAliasResponse){}
  rpc DeleteOutcomeAlias (CreateOutcomeAliasRequest) returns (CreateOutcomeAliasResponse){}

  rpc CreateMarketGroup (CreateMarketGroupRequest) returns (CreateOutcomeAliasResponse){}
  rpc UpdateMarketGroup (CreateMarketGroupRequest) returns (CreateOutcomeAliasResponse){}
  rpc DeleteMarketGroup (DeleteMarketGroupRequest) returns (CreateOutcomeAliasResponse){}
  rpc GetAllMarketGroup (FilterByClientIDRequest) returns (MarketGroupResponse){}
  rpc AddMarketGroupSpecifier (AddSpecifierRequest) returns (CreateOutcomeAliasResponse){}
  rpc UpdateMarketGroupSpecifier (AddSpecifierRequest) returns (CreateOutcomeAliasResponse){}
  rpc DeleteMarketGroupSpecifier (DeleteSpecifierRequest) returns (CreateOutcomeAliasResponse){}

  rpc CreateDefaultSportMarket(DefaultSportMarketDTO) returns (ResponseString){}
  rpc UpdateDefaultSportMarket(DefaultSportMarketDTO) returns (ResponseString){}
  rpc DeleteDefaultSportMarket(ID) returns (ResponseString){}
  rpc GetDefaultSportMarket(Empty) returns (DefaultSportMarketsDTO){}

  rpc AddFavourites(AddFavouriteRequest) returns (AddFavouriteResponse) {}

  //GetHighlights - This GRPC method retrieves the odds for a particular market (e.g 1x2, total, Double chance etc) for games, the method provides a way to pass pagination parameters, this method will be used to load games in the front page of the site
  rpc GetRetailFixtures (GetFixturesRequest) returns (GetFixturesResponse){}
  //Get Fixture Retail - Loads odds for all the markets of the supplied matchID
  rpc GetRetailFixture (FilterByMatchID) returns (FixtureWithOutcomes){}


  rpc GetTopTournaments (FilterByClientIDRequest) returns (GetTopTournamentResponse){}
  rpc SaveTopTournament (SaveTopTournamentRequest) returns (CommonResponse){}
  rpc RemoveTopTournament (DeleteMarketGroupRequest) returns (CommonResponse){}

  rpc GetSportsTournamentMenu (Empty) returns (GetSportTournamentResponse){}
  rpc UpdateSportsMenuOrder (UpdateSportsMenuOrderRequest) returns (CommonResponse){}
  rpc GetActiveGamesMarkets (FilterByMatchID) returns (GetActiveMarketResponse){}
  rpc ValidateSelections (ValidateSelectionRequests) returns (ValidateSelectionResponse){}

  // Admin methods for sports management
  rpc GetSportCategories (FilterBySportID) returns (GetCategoriesResponse){}
  rpc GetCategoryTournament (FilterByCategoryID) returns (GetTournamentsResponse){}

  // Tournament management methods
  rpc UpdateMargins (UpdateMarginsRequest) returns (CommonResponse){}
  rpc GetTournamentEvents (FilterByTournamentID) returns (GetTournamentEventsResponse){}

  // Odds management methods
  rpc UpdateOdds (UpdateOddsRequest) returns (CommonResponse){}
  rpc UpdateEventStatus (UpdateEventStatusRequest) returns (CommonResponse){}
}

message ValidateSelectionRequests {
  message ValidateSelection {
    int32 outcomeID = 1;
    int32 gameID = 2;
    int32 marketID = 3;
    string specifier = 4;
  }

  repeated ValidateSelection data = 1;
}

message ValidateSelectionResponse {
  bool success = 1;
  string message = 2;
  message Data {
    message RejectedData {
      int32 matchID = 1;
      optional string eventName = 2;
      int32 outcomeID = 3;
      int32 marketID = 4;
      int32 gameID = 5;
    }

    message AcceptedData {
      string tournament = 1; // tournament name
      int32 sportID = 2; // Unique ID of the sport
      int32 gameID = 3; //Unique ID of the fixture (will always be between 1000 and 99999)
      string name = 4; // fixture name e.g ABC FC vs Yanga FC
      int32 matchID = 5; // Unique ID of the match (Betradar ID)
      string date = 6; // Match date
      string categoryName = 7; // Fixture country code
      string sportName = 8; // Away team name
      string marketName = 9; // market name
      string outcomeName = 10; // outcome name
      string specifier = 11; // specifier if any is available
      string outcomeID = 12; // outcomeID
      string odds = 13; // current odds
      int32 active = 14; // wether odd is active or deactivated, 1 - ACtive, 0 - Deactivated
      int32 producerID = 15; // ID of the producer that send the odds
      int32 marketID = 16; // Unique ID of this market
      string homeTeam = 17;
      string awayTeam = 18;
      int32 eventID = 19;
    }

    repeated RejectedData rejected = 1;
    repeated AcceptedData accepted = 2;
  }
  optional Data data = 4;
}

message GetActiveMarketResponse {
  bool success = 1;
  string message = 2;
  int32 status = 3;
  message Data {
    repeated string games = 1;
    repeated ActiveMarket activeMarkets = 2; 
  }
  optional Data data = 4;
}

message ActiveMarket {
  int32 outcomeID = 1;
  int32 marketID = 2;
  string name = 3;
  string code = 4;
  string specifier = 5;
}

message UpdateSportsMenuOrderRequest {
  string data = 1;
}

message CommonResponse {
  bool success = 1;
  string message = 2;
}

message GetSportTournamentResponse {
  bool success = 1;
  string message = 2;
  optional string menu = 3;
}


message TopTournamentData {
  int32 id = 1;
  int32 sportID = 2;
  string sportName = 3;
  int32 categoryID = 4;
  string categoryName = 5;
  int32 tournamentID = 6;
  string tournamentName = 7; 
}

message GetTopTournamentResponse {
  repeated TopTournamentData data = 1;
}

message CommonResponseObj {
  bool success = 1;
  string message = 2;
  int32 status = 3;
  optional google.protobuf.Struct data = 4;
}

message CommonResponseArray {
  bool success = 1;
  string message = 2;
  int32 status = 3;
  repeated google.protobuf.Struct data = 4;
}


message GetMarketResponse {
  optional int32 status = 1;
  optional bool success = 2;
  string message = 3;
  repeated CustomMarket data = 4;
}

message CustomMarket {
  int32 id = 1;
  string marketName = 2; // Name of the market
  int32 marketID = 3; // Unique ID of this market
  string groupID = 4; // Market group ID
  string displayName = 5; // Market group ID
  int32 status = 6; // Market status, 0 - active, 1 - suspended, 2 - deactivated, 5 - handedover, only displaye markets with status 0 on the site
  string specifier = 7; // Market line
  string priority = 8; // Market line
  string isPopular = 9; // is Market a popular ond
  string description = 10; // Market description
  string hasCashout = 11; // Market description
  int32 sportID = 12; // Market description
  repeated OutcomeAlias outcomes = 13; // Array of outcomes
}

message BetradarMarketResponse {
  bool success = 1;
  string message = 2;
  int32 status = 3;
  message BetradarMarket {
    string marketID = 1;
    string marketName = 2;
  }
  repeated BetradarMarket data = 4;
}

message SaveTopTournamentRequest {
  int32 clientID = 1;
  int32 sportId = 2;
  int32 categoryId = 3;
  int32 tournamentId = 4;
  string sideMenu = 5;
  string homeScreen = 6;
}

message CreateMarketGroupRequest {
  int32 clientID = 1;
  int32 sportID = 2;
  string groupName = 3;
  optional int32 id = 4;
}

message DeleteMarketGroupRequest {
  int32 id = 1;
}

message FetchMarketGroup {
  int32 clientID = 1;
  int32 sportID = 2;
}

message FilterByClientIDRequest {
  int32 clientID = 1;
}

message AddSpecifierRequest {
  int32 marketGroupID = 1;
  string name = 2;
  int32 marketID = 3;
  string specifier = 4;
}

message MarketGroupSpecifier {
  int32 id = 1;
  string name = 2;
  int32 marketID = 3;
  string specifier = 4;
}

message MarketGroupData {
  int32 marketGroupID = 1;
  string groupName = 2;
  int32 priority = 3;
  int32 status = 4;
  // repeated MarketGroupSpecifier specifiers = 4;
}

message GetMarketsRequest {
  int32 clientID = 1;
  int32 sportID = 2;
  optional int32 groupID = 3;
}

message SaveMarketRequest {
  int32 clientID = 1;
  int32 sportID = 2;
  int32 marketID = 3;
  optional int32 groupID = 4;
  string name = 5;
  optional string displayName = 6;
  optional string description = 7;
  int32 status = 8;
  optional int32 enableCashout = 9;
  int32 isDefault = 10;
  optional int32 id = 11;
  optional int32 priority = 12;
  optional string specifier = 13;
}

message MarketGroupResponse {
  repeated MarketGroupData groups = 1;
}

message DeleteSpecifierRequest {
  int32 id = 1;
}

message CountResponse {
  int32 count = 1; // number of live games

}

message FilterBySportID {
  int32 sportID = 1; // SportID of a particular sport

}

message FilterByCategoryID {
  int32 categoryID = 1; // CategoryID of a particular category
}

message FilterByMarketID {
  int32 marketID = 1; // marketID of a particular market

}

message FilterByMatchID {
  int32 matchID = 1; // matchID of a particular match
  int32 timeoffset = 2;
  optional int32 clientId = 3;
}

message SportFilters {
  int32 sportID = 1; // SportID of a particular sport
  int32 marketID = 2; // marketID of a particular market
  int32 tournamentID = 3; // pass tournamentID to filter by tournament
  string countyCode = 4; // pass countryCode (2 Letter ISO Code) to filter by country
}

//Used where the method does not require any input
message Empty {}


message MarketResponse {
  int32 marketID = 1; // marketID of a particular market
  string marketName = 2; // name of the market
}

// Object used to hold array of markets
message AllMarketResponse {
  repeated MarketResponse markets = 1;
}

message TournamentResponse {
  int32 tournamentID = 1; // Unique ID of the tournament
  string tournamentName = 2; // Name of the tournament
  bool status = 3; // current status of this tournament
  int32 allGames = 4; // current number of total games under this tournament
  optional float oddsMargin = 5;
  optional string combinability = 6;
  optional bool enableCashout = 7;
}

// Object used to hold array of tournament
message AllTournamentResponse {
  repeated TournamentResponse tournaments = 1;
}

message SportResponse {
  int32 sportID = 1; // unique ID of a sport
  string sportName = 2; // Sport name
}

message Category {
  int32 categoryID = 1;
  string categoryName = 2;
  int32 total = 3;
  string code = 4;
  repeated Tournament tournaments = 5;
}

message Tournament {
  int32 tournamentID = 1;
  string tournamentName = 2;
  int32 total = 3;
}

message SportMenuResponse {
  int32 sportID = 1; // unique ID of a sport
  string sportName = 2; // Sport name
  string total = 3; //total fixtures count for a sport
  repeated Category categories = 4;
}

message CategoryMenuResponse {
  repeated Category sports = 1;
}

message TournamentMenuResponse {
  repeated Tournament sports = 1;
}

// Object used to hold array of sports
message AllSportResponse {
  repeated SportResponse sports = 1;
}

// Response for GetSportCategories
message GetCategoriesResponse {
  repeated CategoryResponse categories = 1;
}

// Response for GetCategoryTournament
message GetTournamentsResponse {
  repeated TournamentResponse tournaments = 1;
}

// Category response object
message CategoryResponse {
  int32 categoryID = 1; // unique ID of a category
  string categoryName = 2; // Category name
  int32 sportID = 3; // Sport ID this category belongs to
  string code = 4; // Category code
  int32 status = 5; // Category status
}

// Object used to hold array of sports
message AvailableSportMenuResponse {
  repeated SportMenuResponse sports = 1;
}

message GetSportMenuRequest {
  string period = 1; // period to display
  string start = 2; // start date
  string end = 3; //end date
  int32 timeoffset = 4;
  optional int32 sportId = 5;
  optional int32 categoryId = 6;
}

message GetHighlightsRequest {
  int32 sportID = 1; // Filter fixtures by this sportID
  int32 marketID = 2; // load odds for this particular marketID
  int32 page = 3; // current pagination page
  int32 hours = 4; // If value is greater than 0, we will only display fixtures whoose start date is in the next x hours
  int32 perPage = 5; // records to load per page (pagination)
  int32 tournamentID = 6; // If value > 0 only fixtures of this tournamentID will be loaded
  string countryCode = 7; // If length > 0 only fixtures of this countryCode will be loaded
  int32 upcoming = 8;
  int32 today = 9;
  string specifier = 10;
  int32 timeoffset = 11;
  optional string search = 12;
  optional string favourite = 13;
  optional string userId = 14;
}

message GetFixturesRequest {
  int32 sportID = 1; // Filter fixtures by this sportID
  string markets = 2; // comma separated string of market ids to be loaded
  string source = 3; // mobile or web client making the request
  int32 limit = 4; // no of records to be loaded (optional)
  optional int32 tournamentID = 5; // fetch fixtures of this tournamentID will
  string period = 6; // date range to fetch fixtures
  int32 timeoffset = 7;
  optional int32 categoryID = 8; // fetch fixtures of this categoryID if present
  optional string specifier = 9;
  optional string startDate = 10;
  optional string endDate = 11;
  optional int32 clientId = 12;
}

message HighlightOutcomes {
  string alias = 1; // outcome name alias
  string marketName = 2; // market name
  string outcomeName = 3; // outcome name
  string specifier = 4; // specifier if any is available
  string outcomeID = 5; // outcomeID
  float odds = 6; // current odds
  float previousOdds = 7; // previous odds, odds values before we received current odds
  int32 oddID = 8; // Odd ID
  int32 status = 9; // Outcome status, 0 - Active, 1 - Suspended, 2 - Deactivated, 5 - Handed Over
  int32 active = 10; // wether odd is active or deactivated, 1 - ACtive, 0 - Deactivated
  int32 producerID = 11; // ID of the producer that send the odds
  int32 marketID = 12; // Unique ID of this market
  int32 producerStatus = 13; // ID of the producer that send the odds
  string displayName = 14; // outcome display name

}

message FixturesWithOdds {
  string tournament = 1; // tournament name
  string sportID = 2; // Unique ID of the sport
  string gameID = 3; //Unique ID of the fixture (will always be between 1000 and 99999)
  string name = 4; // fixture name e.g ABC FC vs Yanga FC
  string matchID = 5; // Unique ID of the match (Betradar ID)
  string date = 6; // Match date
  int32 activeMarkets = 7; // Number of active markets
  int32 tournamentID = 8; // Unique ID of the tournament
  int32 statusCode = 9; // match Status code
  int32 status = 10; // Match status
  string categoryID = 11; // Fixture country
  string categoryName = 12; // Fixture country code
  string eventTime = 13; //Current event time e.g 00:10
  string homeScore = 14; // Current Home Score
  string matchStatus = 15; // Match status description, available values NotStarted,Live,Ended,Suspended
  string eventStatus = 16; // event status of a live game available values Live,1st Half,2nd Half,Break,Overtime
  string awayScore = 17; // Current score of the away team
  string homeTeam = 18; // Home team name
  int32 homeTeamID = 19; // Home team ID
  string awayTeam = 20; // Away team name
  int32 awayTeamID = 21; // Away team ID
  string sportName = 22; // Away team name
  repeated HighlightOutcomes outcomes = 23; // Market Outcomes
}

message GetHighlightsResponse {

  repeated FixturesWithOdds fixtures = 1; // Array of fixtures
  int32 lastPage = 2; // Last pagination page
  int32 from = 3; // From data index
  int32 to = 4; // to data index
  int32 remainingRecords = 5; // how many records are remaining
  repeated AvailableMarket markets = 6; // Array of available markets
}

message GetFixturesResponse {

  repeated FixturesWithOdds fixtures = 1; // Array of fixtures
  repeated AvailableMarket selectedMarket = 2; // Array of selected markets
  repeated AvailableMarket markets = 3; // Array of available markets
  repeated MarketGroup groups = 4; // Array of available markets
  repeated MarketOutcome outcomeTypes = 5; // Array of selected markets outcomes
}

message Outcome {
  string alias = 1; // Outcome alias
  string outcomeName = 2; // Outcome name
  string outcomeID = 3; // Unique ID of the outcome
  float odds = 4; // Current odds of the outcome
  float previousOdds = 5; // Previous odds of the outcome
  int32 oddID = 6; // Odd ID
  int32 active = 7; // wether odd is active (1) or not (0), only display active odds on the site
  optional string displayName = 8;
  int32 producerID = 9;
  optional string marketName = 10;
  optional string specifier = 11;
  optional int32 id = 12;
  optional int32 marketId = 13;
  optional int32 status = 14;
  optional int32 priority = 15;
  optional string marketAlias = 16;
  optional string codeWA = 17;
  optional string codeEA = 18;
}

message AvailableMarket {
  string marketID = 1;
  string marketName = 2;
  string specifier = 3;
  string marketGroupID = 4;
  repeated MarketOutcome outcomes = 5;
  int32 sportID = 6;
  int32 groupID = 7;
}

message MarketGroup {
  string groupID = 1;
  string groupName = 2;
}

message Market {
  string marketName = 1; // Name of the market
  int32 marketID = 2; // Unique ID of this market
  string statusName = 3; // Market status name
  int32 status = 4; // Market status, 0 - active, 1 - suspended, 2 - deactivated, 5 - handedover, only displaye markets with status 0 on the site
  string specifier = 5; // Market line
  repeated Outcome outcomes = 6; // Array of outcomes
}

message MarketOutcome {
  // internal id
  int32 id = 1;
  // betradar ID
  int32 outcomeID = 2;
  // market outcome name
  string outcomeName = 3;
  // market name
  string marketName = 4;
  // market id
  string marketID = 5;
  // 
  string displayName = 6;
}

message FixtureOdds {

  string tournament = 1; // Tournament name
  int32 sportID = 2; // Unique ID of the sport
  int32 gameID = 3; // Unique ID of the match (internal ID)
  string name = 4; // Fixture name
  int32 matchID = 5; // Unique ID of the match (betradr ID)
  string date = 6; // Fixture date
  int32 producerID = 7; // Unique ID of the producer that sent the odd
  repeated Market markets = 8; // array of markets
  string categoryName = 9; // Fixture country
  int32 statusCode = 10; // match status code
  int32 producerStatus = 11; // producer status
  string matchStatus = 12; // Match status description, available values NotStarted,Live,Ended,Suspended
  string homeScore = 13; // Current score of the home team
  string awayScore = 14; // Current score of the away team
  string competitor1 = 15; // Home team name
  string competitor2 = 16; // Away team name
  string eventTime = 17; //Current event time e.g 00:10
  string sportName = 18;
  string categoryID = 19;
}

message FixtureWithOutcomes {

  string tournament = 1; // Tournament name
  int32 sportID = 2; // Unique ID of the sport
  int32 gameID = 3; // Unique ID of the match (internal ID)
  string name = 4; // Fixture name
  int32 matchID = 5; // Unique ID of the match (betradr ID)
  string date = 6; // Fixture date
  int32 producerID = 7; // Unique ID of the producer that sent the odd
  repeated Outcome outcomes = 8; // array of markets
  string categoryName = 9; // Fixture country
  int32 statusCode = 10; // match status code
  int32 producerStatus = 11; // producer status
  string matchStatus = 12; // Match status description, available values NotStarted,Live,Ended,Suspended
  string homeScore = 13; // Current score of the home team
  string awayScore = 14; // Current score of the away team
  string competitor1 = 15; // Home team name
  string competitor2 = 16; // Away team name
  string eventTime = 17; // Current event time e.g 00:10
  string sportName = 18;
  string categoryID = 19;
  int32 printID = 20; // Unique Print ID of the match (internal ID)
}

message ResponseString {
  string status = 1;
}

message UpdateMarketRequest {
  int32 marketID = 1; // Unique Market ID
  int32 priority = 2; // Market priority, the higher the value, the more the market priority
}

message CreateOutcomeAliasRequest {
  int32 clientID = 1;
  int32 marketID = 2;
  int32 internalMarketID = 3;
  /** market name */
  string marketName = 4;
  /** outcomes */
  repeated OutcomeAlias outcomes = 5;
}

message CreateOutcomeAliasResponse {
  bool success = 1;
  int32 status = 2;
  string statusDescription = 3;
}

message OutcomeAlias {
  /** outcome name alias */
  optional int32 id = 1 ;
  /** market name */
  string marketName = 2;
  /** outcome name */
  string outcomeName = 3;
  /** specifier if any is available */
  string specifier = 4;
  /** outcomeID */
  string outcomeID = 5;
  /** Unique ID of this market */
  int32  marketID = 6;

  string codeWA = 7;

  string codeEA = 8;

}

message GetAllOutcomeAliasResponse {
  repeated OutcomeAlias outcomes = 1;
}

message GetAllOutcomeAliasRequest {
  int32 clientID = 1;
}

message ID {
  int32 id = 1;
}

message DefaultSportMarketDTO {
  int32 sportID = 1;
  int32 marketID = 2;
}

message DefaultSportMarketsDTO {
  repeated DefaultSportMarketDTO sports = 1;
}

message AddFavouriteRequest {
  int32 userId = 1;
  int32 clientId = 2;
  int32 competitor1 = 3;
  int32 competitor2 = 4;
  string action = 5;
}

message AddFavouriteResponse {
  bool success = 1;
  string message = 2;
}

// Tournament management request/response messages
message UpdateMarginsRequest {
  int32 clientID = 1;
  int32 tournamentId = 2;
  float margin = 3;
  bool status = 4;
  bool enableCashout = 5;
  string combinability = 6;
}

message FilterByTournamentID {
  int32 tournamentID = 1;
}

message TournamentEvent {
  int32 gameID = 1;
  int32 matchID = 2;
  string eventName = 3;
  string homeTeam = 4;
  string awayTeam = 5;
  string eventDate = 6;
  string eventTime = 7;
  int32 status = 8;
  string matchStatus = 9;
  int32 homeScore = 10;
  int32 awayScore = 11;
  int32 activeMarkets = 12;
  bool highlighted = 13;
}

message GetTournamentEventsResponse {
  bool success = 1;
  string message = 2;
  repeated TournamentEvent events = 3;
  int32 totalEvents = 4;
}

// Odds management request/response messages
message UpdateOddsRequest {
  int32 clientID = 1;
  int32 matchID = 2;
  int32 marketID = 3;
  int32 oddID = 4;
  float odds = 5;
  string specifier = 6;
}

message UpdateEventStatusRequest {
  int32 clientID = 1;
  int32 matchID = 2;
  UpdateType type = 3;
  bool value = 4;
}

enum UpdateType {
  STATUS = 0;
  HIGHLIGHT = 1;
}
